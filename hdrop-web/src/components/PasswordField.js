import { useState, useMemo, useRef, useEffect } from 'react'
import { useSetRecoilState } from 'recoil'
import styled from 'styled-components'
import zxcvbn from 'zxcvbn'
import PropTypes from 'prop-types'

import { MobileDeviceUtil, PasswordUtil } from '../util'
import { passwordAutogeneratedState, passwordState } from '../state'

const GaugeColors = {
    0: 'hsl(0, 50%, 50%)',
    1: 'hsl(30, 50%, 50%)',
    2: 'hsl(60, 50%, 50%)',
    3: 'hsl(90, 50%, 50%)',
    4: 'hsl(120, 50%, 50%)',
}

/**
 * A password field that displays the strength of the password.
 * 
 * @param {{
 * className: string,
 * hidden: boolean,
 * showComplexityScore: boolean
 * allowPasswordGeneration: boolean
 * }} props
 */
const PasswordField = ({ className, hidden = false, showComplexityScore = false, allowPasswordGeneration = false }) => {
    const passwordFieldRef = useRef(null)
    const [password, setPassword] = useState('')
    const setPasswordState = useSetRecoilState(passwordState)
    const setPasswordAutogeneratedState = useSetRecoilState(passwordAutogeneratedState)

    // Detect mobile devices
    const isMobileDevice = MobileDeviceUtil.isMobileDevice()

    // Focus the password field when it is shown
    useEffect(() => {
        if (hidden) return
        passwordFieldRef.current.focus()
    }, [hidden])

    // Calculate the password strength
    const passwordScore = useMemo(() => {
        return zxcvbn(password).score
    }, [password])

    const handlePasswordSubmitInternal = () => {
        const autogenPassword = password.length === 0
        const finalPassword = autogenPassword ? PasswordUtil.generateSecurePassword() : password
        setPasswordState(finalPassword)
        setPasswordAutogeneratedState(autogenPassword)
    }

    /**
     * Handles the keydown event on the password field.
     * 
     * @param {React.KeyboardEvent<HTMLInputElement>} e
     */
    const handlePasswordFieldKeyDown = e => {
        // Disallow submission of empty passwords if password generation is disabled
        if (!allowPasswordGeneration && password.length === 0) {
            return
        }

        // Submit the password on enter
        if (e.key === 'Enter') {
            handlePasswordSubmitInternal()
        }
    }

    return (
        <div className={className} data-hidden={hidden}>
            <input
                ref={passwordFieldRef}
                type="password"
                className="inputField"
                value={password}
                onChange={e => setPassword(e.target.value)}
                onKeyDown={handlePasswordFieldKeyDown}
                placeholder="Password"
                data-gauge-visible={showComplexityScore && password.length > 0}
            />

            {showComplexityScore && (
                <div
                    className="gauge"
                    style={{
                        opacity: password.length === 0 ? 0 : 1,
                        width: `${passwordScore / 4.0 * 100}%`,
                        background: GaugeColors[passwordScore]
                    }}
                />
            )}

            {allowPasswordGeneration && (
                <div className="hint-container">
                    {isMobileDevice && (
                        <div className="btn-generate" onClick={() => handlePasswordSubmitInternal()} data-hidden={password.length > 0}>
                            Generate secure password
                        </div>
                    )}
                    {!isMobileDevice && (
                        <div className="autogenerate" data-hidden={password.length > 0}>
                            Press <kbd>Enter</kbd> to automatically generate a secure password.
                        </div>
                    )}
                </div>
            )}
        </div>
    )
}

PasswordField.propTypes = {
    className: PropTypes.string,
    hidden: PropTypes.bool,
    showComplexityScore: PropTypes.bool,
    allowPasswordGeneration: PropTypes.bool
}

export default styled(PasswordField)`
    min-width: 300px;
    width: 90%;
    max-width: 750px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    pointer-events: all;

    opacity: 0;
    animation: appear .25s ease forwards;

    & .inputField {
        -webkit-appearance: none;
        appearance: none;
        border: none;
        outline: none;
        padding: 0 1rem;
        width: 100%;
        height: 3rem;
        background: hsl(0,0%,90%);
        border-radius: .5rem;
        opacity: 0;
        font-size: 1.5rem;
        transition: all .33s ease-in-out;
        opacity: 1;
        pointer-events: all;
        transform: scale(1);

        @media screen and (min-width: 700px) {
            height: 4rem;
            font-size: 1.75rem;
            border-radius: .75rem;
        }

        @media screen and (min-width: 1200px) {
            height: 5rem;
            font-size: 2rem;
            border-radius: .75rem;
        }

        &[data-gauge-visible='true'] {
            border-bottom-left-radius: 0;
            border-bottom-right-radius: 0;
        }
    }

    & .gauge {
        align-self: flex-start;
        min-width: 10%;
        max-width: 100%;
        height: .5rem;
        border-radius: 0 0 .25rem .25rem;
        transition: all .33s ease-in-out;
    }

    & .hint-container {
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        margin-top: 1rem;
        color: hsl(0,0%,75%);

        & kbd {
            background: hsl(0,0%,10%);
            border-radius: .25rem;
            padding: .25rem .5rem;
        }

        & .btn-generate {
            opacity: 1;
            background: hsl(0,0%,10%);
            color: hsl(0,0%,90%);
            border-radius: .5rem;
            padding: .75rem 1.5rem;
            font-size: 1rem;
            transition: all .33s ease-in-out;

            &[data-hidden='true'] {
                opacity: 0;
                transform: translateY(.5rem);
            }
        }

        & .autogenerate {
            position: absolute;
            opacity: 1;
            transition: all .25s ease-in-out;
            text-align: center;
            margin-top: 2rem;

            @media screen and (min-width: 700px) {
                margin: 0;
            }
    
            &[data-hidden='true'] {
                opacity: 0;
                transform: translateY(.5rem);
            }
        }
    
        & .complexity {
            margin-top: .5rem;
            position: absolute;
            opacity: 1;
            transition: all .33s ease-in-out;
    
            &[data-hidden='true'] {
                opacity: 0;
            }
        }
    }
`